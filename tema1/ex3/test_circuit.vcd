$date
	Sat Oct 24 16:21:24 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_circuit $end
$var wire 4 ! test_output [3:0] $end
$var reg 1 " clk $end
$var reg 4 # test_a [3:0] $end
$var reg 4 $ test_b [3:0] $end
$var reg 4 % test_c [3:0] $end
$var reg 4 & test_d [3:0] $end
$var reg 4 ' test_e [3:0] $end
$var reg 4 ( test_f [3:0] $end
$scope module c1 $end
$var wire 4 ) a [3:0] $end
$var wire 4 * b [3:0] $end
$var wire 4 + c [3:0] $end
$var wire 1 " clk $end
$var wire 4 , d [3:0] $end
$var wire 4 - e [3:0] $end
$var wire 4 . f [3:0] $end
$var wire 4 / o [3:0] $end
$var wire 4 0 scazator [3:0] $end
$var wire 4 1 rez_sub1 [3:0] $end
$var wire 4 2 rez_mult1 [3:0] $end
$var wire 4 3 rez_div3 [3:0] $end
$var wire 4 4 rez_div2 [3:0] $end
$var wire 4 5 rez_div1 [3:0] $end
$var wire 12 6 out2 [11:0] $end
$var wire 12 7 out1 [11:0] $end
$var wire 4 8 factor2 [3:0] $end
$var wire 4 9 factor1 [3:0] $end
$var wire 4 : descazut [3:0] $end
$scope module div1 $end
$var wire 4 ; op_div1 [3:0] $end
$var wire 4 < op_div2 [3:0] $end
$var wire 4 = out_div [3:0] $end
$upscope $end
$scope module div2 $end
$var wire 4 > op_div1 [3:0] $end
$var wire 4 ? op_div2 [3:0] $end
$var wire 4 @ out_div [3:0] $end
$upscope $end
$scope module div3 $end
$var wire 4 A op_div1 [3:0] $end
$var wire 4 B op_div2 [3:0] $end
$var wire 4 C out_div [3:0] $end
$upscope $end
$scope module mult1 $end
$var wire 4 D op_mult1 [3:0] $end
$var wire 4 E op_mult2 [3:0] $end
$var wire 4 F out_mult [3:0] $end
$upscope $end
$scope module rp1 $end
$var wire 1 " clk $end
$var wire 12 G in [11:0] $end
$var reg 12 H out [11:0] $end
$upscope $end
$scope module rp2 $end
$var wire 1 " clk $end
$var wire 12 I in [11:0] $end
$var reg 12 J out [11:0] $end
$upscope $end
$scope module sub1 $end
$var wire 4 K op_sub1 [3:0] $end
$var wire 4 L op_sub2 [3:0] $end
$var wire 4 M out_sub [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx M
bx L
bx K
bx J
b0xxxx I
bx H
bx G
bx F
bx E
bx D
bx C
b1101 B
b10 A
bx @
b1000 ?
b1010 >
bx =
b1 <
b0 ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
b1101 .
b10 -
b1000 ,
b1010 +
b1 *
b0 )
b1101 (
b10 '
b1000 &
b1010 %
b1 $
b0 #
0"
bx !
$end
#10
b0xxxx 6
b0xxxx J
1"
#20
b101 (
b101 .
b101 B
b0 '
b0 -
b0 A
b1001 &
b1001 ,
b1001 ?
b1110 %
b1110 +
b1110 >
b101 $
b101 *
b101 <
b10 #
b10 )
b10 ;
0"
b0 3
b0 C
b1 4
b1 @
b10000 G
b0 5
b0 =
#30
b0 0
b0 L
b1 8
b1 E
b0 9
b0 D
b10000 7
b10000 H
1"
#40
b1100 (
b1100 .
b1100 B
b10 '
b10 -
b10 A
b1010 &
b1010 ,
b1010 ?
b1010 %
b1010 +
b1010 >
b1 $
b1 *
b1 <
b100 #
b100 )
b100 ;
0"
#45
b0 I
b0 2
b0 F
#50
b0 :
b0 K
b0 6
b0 J
1"
#60
b1001 (
b1001 .
b1001 B
b110 '
b110 -
b110 A
b1000 &
b1000 ,
b1000 ?
b1110 %
b1110 +
b1110 >
b101 $
b101 *
b101 <
b0 !
b0 /
b0 1
b0 M
0"
b10100 G
b100 5
b100 =
#70
b100 9
b100 D
b10100 7
b10100 H
1"
#80
b1100 &
b1100 ,
b1100 ?
b10 %
b10 +
b10 >
0"
b10000 G
b0 5
b0 =
#85
b100 I
b100 2
b100 F
#90
b0 9
b0 D
b100 :
b100 K
b10000 7
b10000 H
b100 6
b100 J
1"
#100
b1101 (
b1101 .
b1101 B
b10 '
b10 -
b10 A
b1001 &
b1001 ,
b1001 ?
b1010 %
b1010 +
b1010 >
b1 $
b1 *
b1 <
b0 #
b0 )
b0 ;
b100 !
b100 /
b100 1
b100 M
0"
b0 G
b0 4
b0 @
#105
b0 I
b0 2
b0 F
#110
b0 :
b0 K
b0 8
b0 E
b0 6
b0 J
b0 7
b0 H
1"
#120
b1000 (
b1000 .
b1000 B
b1100 '
b1100 -
b1100 A
b1011 &
b1011 ,
b1011 ?
b1111 %
b1111 +
b1111 >
b1101 $
b1101 *
b1101 <
b1110 #
b1110 )
b1110 ;
b0 !
b0 /
b0 1
b0 M
0"
b10000 G
b1 4
b1 @
#130
b1 8
b1 E
b10000 7
b10000 H
1"
#140
b1001 (
b1001 .
b1001 B
b1010 '
b1010 -
b1010 A
b1010 &
b1010 ,
b1010 ?
b1010 %
b1010 +
b1010 >
b1001 $
b1001 *
b1001 <
b1100 #
b1100 )
b1100 ;
0"
b1 3
b1 C
b100010001 G
b1 5
b1 =
#150
b1 0
b1 L
b1 9
b1 D
b100010001 7
b100010001 H
1"
#160
b1011 (
b1011 .
b1011 B
b110 '
b110 -
b110 A
b1000 &
b1000 ,
b1000 ?
b1110 %
b1110 +
b1110 >
b101 $
b101 *
b101 <
b101 #
b101 )
b101 ;
b1111 !
b1111 /
b1111 1
b1111 M
0"
#165
b1 I
b1 2
b1 F
#170
b1 :
b1 K
b1 6
b1 J
1"
#180
b1100 (
b1100 .
b1100 B
b10 '
b10 -
b10 A
b1101 &
b1101 ,
b1101 ?
b11 %
b11 +
b11 >
b1100 $
b1100 *
b1100 <
b110 #
b110 )
b110 ;
b0 !
b0 /
b0 1
b0 M
0"
b10001 G
b0 3
b0 C
#190
b0 0
b0 L
b10001 7
b10001 H
1"
#200
b1101 (
b1101 .
b1101 B
b11 '
b11 -
b11 A
b1010 &
b1010 ,
b1010 ?
b1011 %
b1011 +
b1011 >
b101 $
b101 *
b101 <
b100 #
b100 )
b100 ;
b1 !
b1 /
b1 1
b1 M
0"
b0 4
b0 @
b0 G
b0 5
b0 =
#210
b0 8
b0 E
b0 9
b0 D
b0 7
b0 H
1"
#220
b101 (
b101 .
b101 B
b1010 '
b1010 -
b1010 A
b1011 &
b1011 ,
b1011 ?
b1110 %
b1110 +
b1110 >
b1001 $
b1001 *
b1001 <
b1010 #
b1010 )
b1010 ;
0"
b10000 G
b1 4
b1 @
#225
b0 I
b0 2
b0 F
#230
b0 :
b0 K
b1 8
b1 E
b0 6
b0 J
b10000 7
b10000 H
1"
#240
b100 (
b100 .
b100 B
b10 '
b10 -
b10 A
b1000 &
b1000 ,
b1000 ?
b1011 %
b1011 +
b1011 >
b100 $
b100 *
b100 <
b1100 #
b1100 )
b1100 ;
b0 !
b0 /
b0 1
b0 M
0"
b10 3
b10 C
b1000010001 G
b1 5
b1 =
#250
b10 0
b10 L
b1 9
b1 D
b1000010001 7
b1000010001 H
1"
#260
b1 (
b1 .
b1 B
b110 '
b110 -
b110 A
b1100 &
b1100 ,
b1100 ?
b1010 %
b1010 +
b1010 >
b101 $
b101 *
b101 <
b111 #
b111 )
b111 ;
b1110 !
b1110 /
b1110 1
b1110 M
0"
b0 3
b0 C
b10011 G
b11 5
b11 =
#265
b1 I
b1 2
b1 F
#270
b1 :
b1 K
b0 0
b0 L
b11 9
b11 D
b1 6
b1 J
b10011 7
b10011 H
1"
#280
b1001 (
b1001 .
b1001 B
b111 '
b111 -
b111 A
b1110 &
b1110 ,
b1110 ?
b110 %
b110 +
b110 >
b1100 $
b1100 *
b1100 <
b1110 #
b1110 )
b1110 ;
b1 !
b1 /
b1 1
b1 M
0"
b110 3
b110 C
b0 4
b0 @
b11000000001 G
b1 5
b1 =
#285
b11 I
b11 2
b11 F
#290
b110 0
b110 L
b0 8
b0 E
b1 9
b1 D
b11 :
b11 K
b11000000001 7
b11000000001 H
b11 6
b11 J
1"
#300
b1101 !
b1101 /
b1101 1
b1101 M
0"
b1 G
b0 3
b0 C
